[{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/one_way_anova.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Sequential One-Way ANOVA","text":"sprtt package sequential probability ratio tests toolbox (sprtt). vignette describes theoretical background tests. recommended vignettes cover: general guide, use package extended use case.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/one_way_anova.html","id":"what-is-a-sequential-test-procedure","dir":"Articles","previous_headings":"","what":"What is a sequential test procedure?","title":"Sequential One-Way ANOVA","text":"sequential approach, data continuously collected analysis performed data point, can lead three different results (. Wald, 1945): data collection terminated enough evidence collected null hypothesis (H0). data collection terminated enough evidence collected alternative hypothesis (H1). data collection continue yet enough evidence either two hypotheses. Basically necessary perform analysis data point — several data points can also added . However, affects sample size (N) error rates (Schnuerch et al., 2020). efficiency sequential designs already examined. Reductions sample 50% found comparison analyses fixed sample sizes (Schnuerch et al., 2020; . Wald, 1945). Sequential hypothesis testing therefore particularly suitable resources limited required sample size reduced without compromising predefined error probabilities.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/one_way_anova.html","id":"what-is-the-sequential-one-way-anova","dir":"Articles","previous_headings":"","what":"What is the sequential one-way ANOVA?","title":"Sequential One-Way ANOVA","text":"sequential one-way fixed effects ANOVA based Sequential Probability Ratio Test (SPRT) Abraham Abraham Wald (1947), highly efficient sequential hypothesis test. can used instead t-tests means two groups compared. detailed information see public preprint (Steinhilber et al., 2023).","code":""},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/articles/sprts.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SPRTs","text":"sprtt package sequential probability ratio tests toolbox (sprtt). vignette describes theoretical background tests. recommended vignettes cover: general guide, use package extended use case.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/sprts.html","id":"what-is-a-sequential-test-procedure","dir":"Articles","previous_headings":"","what":"What is a sequential test procedure?","title":"SPRTs","text":"sequential approach, data continuously collected analysis performed data point, can lead three different results (Wald, 1945): data collection terminated enough evidence collected null hypothesis (H0). data collection terminated enough evidence collected alternative hypothesis (H1). data collection continue yet enough evidence either two hypotheses. Basically necessary perform analysis data point — several data points can also added . However, affects sample size (N) error rates (Schnuerch et al., 2020). efficiency sequential designs already examined. Reductions sample 50% found comparison analyses fixed sample sizes (Schnuerch et al., 2020; Wald, 1945). Sequential hypothesis testing therefore particularly suitable resources limited required sample size reduced without compromising predefined error probabilities.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/t_test.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Sequential t-Test","text":"sprtt package sequential probability ratio tests toolbox (sprtt). vignette describes theoretical background tests. recommended vignettes cover: general guide, use package extended use case.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/t_test.html","id":"what-is-a-sequential-test-procedure","dir":"Articles","previous_headings":"","what":"What is a sequential test procedure?","title":"Sequential t-Test","text":"sequential approach, data continuously collected analysis performed data point, can lead three different results (. Wald, 1945): data collection terminated enough evidence collected null hypothesis (H0). data collection terminated enough evidence collected alternative hypothesis (H1). data collection continue yet enough evidence either two hypotheses. Basically necessary perform analysis data point — several data points can also added . However, affects sample size (N) error rates (Schnuerch et al., 2020). efficiency sequential designs already examined. Reductions sample 50% found comparison analyses fixed sample sizes (Schnuerch et al., 2020; . Wald, 1945). Sequential hypothesis testing therefore particularly suitable resources limited required sample size reduced without compromising predefined error probabilities.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/t_test.html","id":"what-is-the-sequential-t-test","dir":"Articles","previous_headings":"","what":"What is the sequential t-test?","title":"Sequential t-Test","text":"sequential t-test based Sequential Probability Ratio Test (SPRT) Abraham Abraham Wald (1947), highly efficient sequential hypothesis test. However, usage Wald´s SPRT limited case normally distributed data, variance known specified hypothesis. Rushton (1952; 1950) Hajnal (1961) developed SPRT using t-statistic. basic idea transform sequence observations (dependent variance) sequence associated t-statistic (independent variance). SPRT null alternative hypotheses defined follows, 𝜃 representing model parameter : \\[ H_0:\\ 𝜃\\ =\\ 𝜃_0 \\\\ H_1:\\ 𝜃\\ =\\ 𝜃_1 \\] test statistic SPRT based likelihood ratio, measure relative evidence data given hypotheses. specifically, ratio likelihood alternative hypothesis likelihood null hypothesis m-th step sampling process (LRm). \\[ LR_{m} = \\frac {f(data_m | H_1)} {f(data_m | H_0)} = \\frac {𝑓(x_1,...,x_m | 𝜃_1)} {𝑓(x_1,...,x_m  | 𝜃_0)} \\] transformation t-statistic, model parameter 𝜃 contains parameters normal distribution: mean (µ) standard deviation (𝜎). Therefore, Wald SPRT requires prior knowledge variance (𝜎2) specification hypotheses. transformation observed values associated t-statistic, model parameter 𝜃 contains parameters non-central t-distribution: degrees freedom (df) non-centrality parameter (𝛥). \\[ {𝑓(x_1,...,x_m | µ,𝜎)} => {𝑓(t_2,...,t_m  | df,𝛥)} \\] calculation degrees freedom, sample size group(s) needed. non-centrality parameter also requires specification expected effect size form Cohen`s d (d). eventually calculate LR sequential t-test, current tm-statistic necessary. S. Rushton (1950) demonstrated SPRT can performed simply considering ratio probability densities recent tm statistic alternative null hypothesis m-th stage. Thus, test statistic one two-sided sequential t-test can calculated follows: \\[ LR_{m,\\ one-sided\\ sequential\\ t-test} = \\frac {𝑓(t_m | 𝜃_1)} {𝑓(t_m | 𝜃_0)} \\\\ LR_{m,\\ two-sided\\ sequential\\ t-test} = \\frac {𝑓(t_m^2 | 𝜃_1)} {𝑓(t_m^2 | 𝜃_0)}. \\] account fact algebraic sign unknown two-sided test, t-value squared (S. Rushton, 1952). calculation test statistic, decision either continue sampling terminate sampling accept one hypotheses. . Wald (1945) defined following rules SPRT: B boundaries calculated previously defined error rates 𝛼 (Type error) 𝛽 (Type II error) follows: \\[ = \\left( \\frac{1 - 𝛽}{𝛼} \\right) \\\\ B = \\left( \\frac{𝛽}{1 - 𝛼} \\right). \\] summary, three specifications required calculate sequential t-test: 𝛼 error probability (usually 0.05 less), 𝛽 error probability (usually .20 less), Cohen´s d (either expected effect size lower limit substantial effect).","code":""},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"How to use the sprtt package","text":"data sets used included sprtt package. Thus, data sets available package loaded. R code sections: # comment: comment function(): R code #> results function(): console output","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"How to use the sprtt package","text":"sprtt package sequential probability ratio tests toolbox (sprtt). vignette demonstrates usage package using seq_ttest() function arguments short examples. theoretical background sequential t-test covered vignette. seq_ttest() function arguments specify requested sequential t-test. table shows possible combinations can performed package. recommended vignettes cover: theoretical background extended use case.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"How to use the sprtt package","text":"Prior using sprtt package must installed loaded. latest release version package can either installed CRAN latest development version GitHub. information installation can found .","code":"# load the package library(sprtt)"},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"what-does-the-package-contain","dir":"Articles","previous_headings":"","what":"What does the package contain?","title":"How to use the sprtt package","text":"sprtt package contains: seq_ttest() : function performs sequential t-tests df_income: set data run examples given vignette df_stress: set data run examples given vignette df_cancer: set data run examples given vignette","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"how-do-i-use-the-seq_ttest-function","dir":"Articles","previous_headings":"","what":"How do I use the seq_ttest() function?","title":"How to use the sprtt package","text":"seq_ttest() function works similarly t.test() function stats package one familiar already. Sequential t-tests require specification user: variables, contain data, error probability alpha, power (1 - 𝛽), effect size Cohen`s d, represents expected effect size lowest effect size interest, optional arguments specify test. However, cases, necessary specify arguments default values. values ones required, can skipped. two different ways data can transferred function. x argument takes either formula numeric input. input option recommended depends structure data.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"x-argument-formula-input","dir":"Articles","previous_headings":"How do I use the seq_ttest() function?","what":"x argument: formula input","title":"How to use the sprtt package","text":"formula input used groups merged one variable second variable indicates group membership. input option uses x argument data argument variables stored data frame.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"two-sample-test","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > x argument: formula input","what":"Two-sample test","title":"How to use the sprtt package","text":"","code":"# show data frame -------------------------------------------------------------- head(df_income) #>   monthly_income    sex #> 1       4091.001 female #> 2       3274.591   male #> 3       2696.436 female #> 4       3826.413   male #> 5       3522.478 female #> 6       2563.597   male  # sequential t-test: data argument --------------------------------------------- seq_ttest(monthly_income ~ sex,     # x argument            data = df_income,           d = 0.2) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: monthly_income ~ sex #> test statistic: #>  log-likelihood ratio = -0.594, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = 0.827 #>  null hypothesis = 1.421 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.2 #> degrees of freedom: df = 118 #> sample estimates: #> mean of x mean of y  #>  3072.086  3080.715  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"one-sample-test","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > x argument: formula input","what":"One-sample test","title":"How to use the sprtt package","text":"perform one-sample test, right side formula 1. mu argument also required, specifies mean value one wants test .","code":"# show data frame -------------------------------------------------------------- head(df_income) #>   monthly_income    sex #> 1       4091.001 female #> 2       3274.591   male #> 3       2696.436 female #> 4       3826.413   male #> 5       3522.478 female #> 6       2563.597   male  # sequential t-test: data argument --------------------------------------------- seq_ttest(monthly_income ~ 1,     # x argument            mu = 3000,           d = 0.5,           data = df_income) #>  #> *****  Sequential One Sample t-test ***** #>  #> formula: monthly_income ~ 1 #> test statistic: #>  log-likelihood ratio = -6.288, decision = accept H0 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -9.182 #>  null hypothesis = -2.894 #> alternative hypothesis: true mean is not equal to 3000. #> specified effect size: Cohen's d = 0.5 #> degrees of freedom: df = 119 #> sample estimates: #> mean of x  #>    3076.4  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"x-argument-numeric-input","dir":"Articles","previous_headings":"How do I use the seq_ttest() function?","what":"x argument: numeric input","title":"How to use the sprtt package","text":"numeric input used group variable. variables can either put global environment directly stored data frame.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"two-sample-test-1","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > x argument: numeric input","what":"Two-sample test","title":"How to use the sprtt package","text":"one wants perform two-sample test, y argument required addition x. data stored data frame, $ operator essential get access variables.","code":"# show data frame -------------------------------------------------------------- head(df_cancer) #>   treatment_group control_group #> 1        6.097665      4.493064 #> 2        6.609234      5.520956 #> 3        5.665810      3.954091 #> 4        4.830564      3.733212 #> 5        4.917361      4.109373 #> 6        3.457433      3.563800  # sequential t-test: $ operator ------------------------------------------------ seq_ttest(df_cancer$treatment_group, # x argument           df_cancer$control_group,   # y argument           d = 0.3,                              verbose = FALSE)            #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: df_cancer$treatment_group and  df_cancer$control_group #> test statistic: #>  log-likelihood ratio = 10.777, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944   # sequential t-test: global variables ------------------------------------------ treatment <- df_cancer$treatment_group control <- df_cancer$control_group  seq_ttest(treatment,           control,           d = 0.3,           verbose = FALSE) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: treatment and  control #> test statistic: #>  log-likelihood ratio = 10.777, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944"},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"one-sample-test-1","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > x argument: numeric input","what":"One-sample test","title":"How to use the sprtt package","text":"one wants perform one-sample test one group therefore one variable. data data frame, $ operator essential get access variables. mu argument additionally required, specifies mean one wants test .","code":"# show data frame -------------------------------------------------------------- head(df_cancer) #>   treatment_group control_group #> 1        6.097665      4.493064 #> 2        6.609234      5.520956 #> 3        5.665810      3.954091 #> 4        4.830564      3.733212 #> 5        4.917361      4.109373 #> 6        3.457433      3.563800  # sequential t-test: $ operator ------------------------------------------------ seq_ttest(df_cancer$treatment_group,     # x argument           mu = 3.5,                       d = 0.2,           verbose = FALSE) #>  #> *****  Sequential One Sample t-test ***** #>  #> formula: df_cancer$treatment_group #> test statistic: #>  log-likelihood ratio = 16.677, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944   # sequential t-test: global variables ------------------------------------------ treatment <- df_cancer$treatment_group  seq_ttest(treatment,     # x argument           mu = 3.5,            data = df,           d = 0.2,                             verbose = FALSE) #>  #> *****  Sequential One Sample t-test ***** #>  #> formula: treatment #> test statistic: #>  log-likelihood ratio = 16.677, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944"},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"paired","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > Further arguments","what":"Paired","title":"How to use the sprtt package","text":"paired argument states data paired. perform paired sequential t-test, paired set TRUE.","code":"# show data frame -------------------------------------------------------------- head(df_stress) #>   baseline_stress one_year_stress #> 1        7.175250        7.844337 #> 2        4.918343        5.527191 #> 3        4.634266        5.783046 #> 4        5.671340        7.793956 #> 5        4.141257        3.133889 #> 6        4.771696        8.548586  # sequential t-test: $ operator ------------------------------------------------ seq_ttest(df_stress$baseline_stress, # x argument           df_stress$one_year_stress, # y argument           d = 0.3,           paired = TRUE,           data = df_stress)   #>  #> *****  Sequential Paired t-test ***** #>  #> formula: df_stress$baseline_stress and  df_stress$one_year_stress #> test statistic: #>  log-likelihood ratio = 7.174, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -3.483 #>  null hypothesis = -10.657 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.3 #> degrees of freedom: df = 119 #> sample estimates: #> mean difference  #>        -0.39622  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"alternative","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > Further arguments","what":"Alternative","title":"How to use the sprtt package","text":"alternative argument states way test performed: two-sided: \"two.sided\" one-sided: \"less\" \"greater\".","code":"# show data frame -------------------------------------------------------------- head(df_income) #>   monthly_income    sex #> 1       4091.001 female #> 2       3274.591   male #> 3       2696.436 female #> 4       3826.413   male #> 5       3522.478 female #> 6       2563.597   male  # sequential t-test: data argument --------------------------------------------- seq_ttest(monthly_income ~ 1,     # x argument            mu = 1000,           d = 0.3,           alternative = \"two.sided\",           data = df_income) #>  #> *****  Sequential One Sample t-test ***** #>  #> formula: monthly_income ~ 1 #> test statistic: #>  log-likelihood ratio = 31.548, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -149.747 #>  null hypothesis = -181.295 #> alternative hypothesis: true mean is not equal to 1000. #> specified effect size: Cohen's d = 0.3 #> degrees of freedom: df = 119 #> sample estimates: #> mean of x  #>    3076.4  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"na-rm","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > Further arguments","what":"Na.rm","title":"How to use the sprtt package","text":"na.rm argument defines handling missing values. set TRUE (default value), remove missing values automatically. behavior wanted, na.rm argument set FALSE. missing values discovered, error triggered.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"verbose","dir":"Articles","previous_headings":"How do I use the seq_ttest() function? > Further arguments","what":"Verbose","title":"How to use the sprtt package","text":"verbose argument defines extent output shown console. set TRUE (default value), output elaborate, set FALSE output short.","code":"# sequential t-test: verbose FALSE --------------------------------------------- seq_ttest(df_cancer$treatment_group, # x argument           df_cancer$control_group,   # y argument           d = 0.3,           verbose = FALSE) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: df_cancer$treatment_group and  df_cancer$control_group #> test statistic: #>  log-likelihood ratio = 10.777, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944  # sequential t-test: verbose TRUE ---------------------------------------------- seq_ttest(df_cancer$treatment_group, # x argument           df_cancer$control_group,   # y argument           d = 0.3,           verbose = TRUE)  #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: df_cancer$treatment_group and  df_cancer$control_group #> test statistic: #>  log-likelihood ratio = 10.777, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -11.635 #>  null hypothesis = -22.411 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.3 #> degrees of freedom: df = 238 #> sample estimates: #> mean of x mean of y  #>   4.92417   4.02215  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/usage_sprtt.html","id":"how-do-i-get-access-to-the-results","dir":"Articles","previous_headings":"","what":"How do I get access to the results?","title":"How to use the sprtt package","text":"simplest way get access results run seq_ttest() function. print results automatically console. verbose argument specifies much information wished shown. However, recommended way save results object (e.g “results”). allows running calculations afterward. important keep mind output object S4 class. Therefore access operator @ sign [] brackets.","code":"# save the resuts in a object  results <- seq_ttest(df_cancer$treatment_group,                      df_cancer$control_group,                        d = 0.3) # access the object with the @ operator  results@decision #> [1] \"accept H1\"  # access the object with the [] brackets results[\"decision\"] #> [1] \"accept H1\""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Use Case","text":"data set df_stress included sprtt package. Thus, data set available package loaded. R code sections: # comment: comment function(): R code #> results function(): console output","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Use Case","text":"sprtt package sequential probability ratio tests toolbox (sprtt). vignette describes exemplary use case improve understanding package sequential t-test. recommended vignettes cover: theoretical background general guide, use package.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use Case","title":"Use Case","text":"team researchers wants know stress employees increased company itFlow AG last year. Human Resources department gathered data new self-care tool implemented employees. difficult predict many employees participate second measurement point (one year baseline). team suggests using sequential t-test instead Students t-test, sequential procedure can reduce required sample size stopped right decision one hypotheses made. Furthermore, sequential t-test able gather evidence alternative null hypothesis.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"hypothesis","dir":"Articles","previous_headings":"Use Case","what":"Hypothesis","title":"Use Case","text":"researchers know company received orders year . Thus, expect increase self-reported stress.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"data-analysis","dir":"Articles","previous_headings":"Use Case","what":"Data Analysis","title":"Use Case","text":"parameters sequential t-test specified follows: researchers expect increase stress prior knowledge expected effect size. Thus, define lower limit substantial effect interest. choose common \\(\\alpha\\) level .05 level \\(\\beta\\) error probability, leads power .95 (\\(1 - \\beta\\)). data repeated measures, therefore test paired sequential t-test. researchers expect stress increased one year. Thus, specify true difference means greater 0.(mean(one_year_stress) - mean(baseline_stress)) > 0 HR department receives new data piece piece passes directly researchers. test performed first time starts first two data points. decision first test : result, researchers take one data point run test . process repeated decision made one two hypotheses. simulate sequential process, -loop embraces sequential t-test function code , stop one hypotheses accepted maximum data reached. -loop comes end 48 data points.","code":"d <- 0.2 alpha <- 0.05 power <- 0.95 paired <- TRUE alternative <- \"greater\" # first data from the Human Resources department --- # current sample size n_person <- 2  # get data df <- df_stress[1:n_person,]  # print data df #>   baseline_stress one_year_stress #> 1        7.175250        7.844337 #> 2        4.918343        5.527191  # sequential t-test results <- seq_ttest(df$one_year_stress,                      df$baseline_stress,                      alpha = alpha,                      power = power,                      d = d,                      paired = paired,                      alternative = alternative,                      verbose = FALSE)  # print results: console output results #>  #> *****  Sequential Paired t-test ***** #>  #> formula: df$one_year_stress and  df$baseline_stress #> test statistic: #>  log-likelihood ratio = 0.332, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 results@decision #> [1] \"continue sampling\" # new data from the Human Resources department --- # get one more person n_person <- n_person + 1 df <- df_stress[1:n_person,]  # print new data df #>   baseline_stress one_year_stress #> 1        7.175250        7.844337 #> 2        4.918343        5.527191 #> 3        4.634266        5.783046  # sequential t-test results <- seq_ttest(df$one_year_stress,                      df$baseline_stress,                      alpha = alpha,                      power = power,                      d = d,                      paired = paired,                      alternative = alternative,                      verbose = FALSE)  # print results results@decision #> [1] \"continue sampling\" # define the starting point decision <- \"continue sampling\" n_person <- 3  # simulation of the sequential procedure while(decision == \"continue sampling\") {   # get the current data   df <- df_stress[1:n_person,]      # run the sequential test and save the results   results <- seq_ttest(df$one_year_stress,                        df$baseline_stress,                        alpha = alpha,                        power = power,                        d = d,                        paired = paired,                        alternative = alternative)   # save the current desicion   decision <- results@decision      # add a new person   n_person <- n_person + 1      # break if the maximum of the data is reached   if (n_person > nrow(df_stress)) {     break   } }  # console output results #>  #> *****  Sequential Paired t-test ***** #>  #> formula: df$one_year_stress and  df$baseline_stress #> test statistic: #>  log-likelihood ratio = 2.988, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -2.238 #>  null hypothesis = -5.226 #> alternative hypothesis: true difference in means is greater than 0. #> specified effect size: Cohen's d = 0.2 #> degrees of freedom: df = 47 #> sample estimates: #> mean difference  #>         0.47931  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/articles/use_case.html","id":"report-results","dir":"Articles","previous_headings":"Use Case","what":"Report Results","title":"Use Case","text":"Starting N = 2, test stops sampling total sample size N = 48 LR48 = 19.85. ratio indicates data 20 times likely H1 H0. Thus, accept alternative hypothesis: perceived stress second measurement (M = 5.47, SD = 1.53) higher one year ago baseline measurement (M = 4.99, SD = 1.02), Cohen`s d = 0.34, 95% CI [0.11, 0.57].1,2","code":"# Required results for the report  # likelihood ratio (LR) LR <- round(results@likelihood_ratio, digits = 2) LR #> [1] 19.85  # sample size (N) = degrees of freedom +2 (two-samples) or +1 (one-sample & paired) N <- results@df + 1 N #> [1] 48  # baseline stress (M and SD) mean_t1 <- round(mean(df$baseline_stress), digits = 2) mean_t1 #> [1] 4.99 sd_t1 <- round(sd(df$baseline_stress), digits = 2) sd_t1 #> [1] 1.02  # after one year stress (M and SD) mean_t2 <- round(mean(df$one_year_stress), digits = 2) mean_t2 #> [1] 5.47 sd_t2 <- round(sd(df$one_year_stress), digits = 2) sd_t2 #> [1] 1.53  # NOT INCLUDED IN THE PACKAGE   # calculate effect size: Cohen´s d d_results <- effsize::cohen.d(df$one_year_stress,                  df$baseline_stress,                  paired = TRUE) d <- round(d_results$estimate, digits = 2) d #> [1] 0.34  # confidence intervall d_lower <- round(d_results$conf.int[[1]], digits = 2) d_lower #> [1] 0.11 d_upper <- round(d_results$conf.int[[2]], digits = 2) d_upper #> [1] 0.57"},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Meike Steinhilber. Author, maintainer. Martin Schnuerch. Author, thesis advisor. Anna-Lena Schubert. Author, thesis advisor.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Steinhilber M, Schnuerch M, Schubert (2023). sprtt: Sequential Probability Ratio Tests Toolbox. R package version 0.2.0, https://meikesteinhilber.github.io/sprtt/.","code":"@Manual{,   title = {sprtt: Sequential Probability Ratio Tests Toolbox},   author = {Meike Steinhilber and Martin Schnuerch and Anna-Lena Schubert},   year = {2023},   note = {R package version 0.2.0},   url = {https://meikesteinhilber.github.io/sprtt/}, }"},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Sequential Probability Ratio Tests Toolbox","text":"sprtt package sequential probability ratio tests toolbox (sprtt). package contains: seq_ttest(), seq_anova() calculates sequential t-test sequential one-way ANOVAs three data sets (df_income, df_stress, df_cancer) run examples t-test documentation plot_anova() plots results sequential ANOVAs draw_sample_normal(), draw_sample_mixture() simulation data sets","code":""},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/index.html","id":"release-version-from-cran","dir":"","previous_headings":"Installation","what":"Release version from CRAN","title":"Sequential Probability Ratio Tests Toolbox","text":"recommended version normal user.","code":"# installs the package install.packages(\"sprtt\")"},{"path":"https://meikesteinhilber.github.io/sprtt/index.html","id":"development-version-from-github","dir":"","previous_headings":"Installation","what":"Development version from GitHub","title":"Sequential Probability Ratio Tests Toolbox","text":"get bug fix use feature development version, can install development version GitHub.","code":"# the installation requires the \"devtools\" package # install.packages(\"devtools\") devtools::install_github(\"MeikeSteinhilber/sprtt\")"},{"path":"https://meikesteinhilber.github.io/sprtt/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Sequential Probability Ratio Tests Toolbox","text":"Detailed documentation can found home page. several articles covering usage package, theoretical background test, also extended use case. Short examples can found following paragraph.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/index.html","id":"quick-examples","dir":"","previous_headings":"Documentation","what":"Quick Examples","title":"Sequential Probability Ratio Tests Toolbox","text":"Note R code sections: # comment: comment function(): R code #> results function(): console output","code":"# set seed -------------------------------------------------------------------- set.seed(333)  # load library ---------------------------------------------------------------- library(sprtt)  # one sample: numeric input --------------------------------------------------- treatment_group <- rnorm(20, mean = 0, sd = 1) results <- seq_ttest(treatment_group, mu = 1, d = 0.8)  # get access to the slots ----------------------------------------------------- # @ Operator results@likelihood_ratio #> [1] 965.0728  # [] Operator results[\"likelihood_ratio\"] #> [1] 965.0728  # two sample: numeric input---------------------------------------------------- treatment_group <- stats::rnorm(20, mean = 0, sd = 1) control_group <- stats::rnorm(20, mean = 1, sd = 1) seq_ttest(treatment_group, control_group, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: treatment_group and  control_group #> test statistic: #>  log-likelihood ratio = 5.347, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -4.211 #>  null hypothesis = -9.558 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 38 #> sample estimates: #> mean of x mean of y  #>  -0.05204   1.18768  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # two sample: formula input --------------------------------------------------- stress_level <- stats::rnorm(20, mean = 0, sd = 1) sex <- as.factor(c(rep(1, 10), rep(2, 10))) seq_ttest(stress_level ~ sex, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: stress_level ~ sex #> test statistic: #>  log-likelihood ratio = -1.455, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -1.233 #>  null hypothesis = 0.222 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 18 #> sample estimates: #> mean of x mean of y  #>  -0.23286  -0.08217  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # NA in the data -------------------------------------------------------------- stress_level <- c(NA, stats::rnorm(20, mean = 0, sd = 2), NA) sex <- as.factor(c(rep(1, 11), rep(2, 11))) seq_ttest(stress_level ~ sex, d = 0.8, na.rm = TRUE) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: stress_level ~ sex #> test statistic: #>  log-likelihood ratio = -0.359, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -1.923 #>  null hypothesis = -1.564 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 18 #> sample estimates: #> mean of x mean of y  #>  -0.40818   0.42068  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # work with dataset (data are in the package included) ------------------------ seq_ttest(monthly_income ~ sex, data = df_income, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: monthly_income ~ sex #> test statistic: #>  log-likelihood ratio = -9.514, decision = accept H0 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -8.093 #>  null hypothesis = 1.421 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 118 #> sample estimates: #> mean of x mean of y  #>  3072.086  3080.715  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_cancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data to run the examples — df_cancer","title":"Test data to run the examples — df_cancer","text":"dataset includes 120 individuals.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_cancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data to run the examples — df_cancer","text":"","code":"df_cancer"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_cancer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test data to run the examples — df_cancer","text":"data frame 2 variables: treatment_group  control_group","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data to run the examples — df_income","title":"Test data to run the examples — df_income","text":"dataset includes 120 individuals sex gender monthly income.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data to run the examples — df_income","text":"","code":"df_income"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_income.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test data to run the examples — df_income","text":"data frame 2 variables: monthly_income  sex","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_stress.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data to run the examples — df_stress","title":"Test data to run the examples — df_stress","text":"dataset includes 120 individuals.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_stress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data to run the examples — df_stress","text":"","code":"df_stress"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/df_stress.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test data to run the examples — df_stress","text":"data frame 2 variables: baseline_stress  one_year_stress","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","title":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","text":"Draws exemplary samples certain effect size sequential one-oway ANOVA sequential t-test, see Steinhilber et al. (2023) doi:10.31234/osf.io/m64ne","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","text":"","code":"draw_sample_mixture(k_groups, f, max_n, counter_n = 100, verbose = FALSE)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","text":"k_groups number groups (levels factor_A) f Cohen's f. simulated effect size. max_n sample size groups (total sample size = max_n*k_groups) counter_n number times function tries find possible parameter combination distribution. Default value set 100. verbose TRUE FALSE. Print information internal process sampling parameters.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","text":"returns data.frame columns y (observations) x (factor_A).","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Samples from a Gaussian Mixture Distribution — draw_sample_mixture","text":"","code":"set.seed(333)  data <- sprtt::draw_sample_mixture(   k_groups = 2,   f = 0.40,   max_n = 2 ) data #>             y x #> 1 -0.35195917 1 #> 2  0.65107923 2 #> 3  1.13464217 1 #> 4  0.06825929 2  data <- sprtt::draw_sample_mixture(   k_groups = 4,   f = 1.2, # very large effect size   max_n = 2,   counter_n = 1000, # increase of counter is necessary   verbose = TRUE # prints more information to the console ) #> Internal counter reached = 54 #>  #> group1: #> mean1 = -1.99074652277088, mean2 = -0.428610482246108, #> sigma1 = 0.834923571040213, sigma2 = 0.287694501108814 #>  #> group2: #> mean1 = 1.23360638346966, mean2 = 0.129657848600828, #> sigma1 = 1.05769847648328, sigma2 = 0.521462126165875 #>  #> group3: #> mean1 = -2.04772209975713, mean2 = -0.141818342492629, #> sigma1 = 0.424153872448029, sigma2 = 0.0621202584498169 #>  #> group4: #> mean1 = 2.60899963472551, mean2 = 0.636633580470748, #> sigma1 = 0.224572574962626, sigma2 = 0.0667325451814857 data #>            y x #> 1 -3.5762655 1 #> 2  0.7385727 2 #> 3 -0.1367248 3 #> 4  0.6237656 4 #> 5 -0.7708177 1 #> 6  1.0060454 2 #> 7 -1.7081033 3 #> 8  0.6918255 4"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Samples from a Normal Distribution — draw_sample_normal","title":"Draw Samples from a Normal Distribution — draw_sample_normal","text":"Draws exemplary samples certain effect size sequential one-oway ANOVA sequential t-test, see Steinhilber et al. (2023) doi:10.31234/osf.io/m64ne","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Samples from a Normal Distribution — draw_sample_normal","text":"","code":"draw_sample_normal(k_groups, f, max_n, sd = NULL, sample_ratio = NULL)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Samples from a Normal Distribution — draw_sample_normal","text":"k_groups number groups (levels factor_A) f Cohen's f. simulated effect size. max_n sample size groups (total sample size = max_n*k_groups) sd vector standard deviations groups. Default value 1 group. sample_ratio vector sample ratios th groups. Default value 1 group.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Samples from a Normal Distribution — draw_sample_normal","text":"returns data.frame columns y (observations) x (factor_A).","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/draw_sample_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Samples from a Normal Distribution — draw_sample_normal","text":"","code":"set.seed(333)  data <- sprtt::draw_sample_normal(   k_groups = 2,   f = 0.20,   max_n = 2 ) data #>             y x #> 1 -2.25128979 1 #> 2  0.47773897 2 #> 3 -1.72596060 1 #> 4 -0.06916362 2  data <- sprtt::draw_sample_normal(   k_groups = 4,   f = 0,   max_n = 2,   sd = c(1, 2, 1, 8) ) data #>             y x #> 1 -1.12490028 1 #> 2 -1.74860723 2 #> 3  0.04386162 3 #> 4 -4.67180114 4 #> 5 -0.82329858 1 #> 6  0.22118560 2 #> 7  0.36472778 3 #> 8  0.42960801 4  data <- sprtt::draw_sample_normal(   k_groups = 3,   f = 0.40,   max_n = 2,   sd = c(1, 0.8, 1),   sample_ratio = c(1, 2, 3) ) data #>              y x #> 1   1.49184945 1 #> 2  -0.76351823 2 #> 3  -0.24272397 2 #> 4  -0.56053126 3 #> 5   0.36241261 3 #> 6   1.02723505 3 #> 7   2.31369573 1 #> 8   0.13318761 2 #> 9  -1.94566881 2 #> 10 -1.03237731 3 #> 11 -0.02972369 3 #> 12  0.81988184 3"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/plot_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Sequential ANOVA Results — plot_anova","title":"Plot Sequential ANOVA Results — plot_anova","text":"Creates plots results seq_anova() function.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/plot_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Sequential ANOVA Results — plot_anova","text":"","code":"plot_anova(   anova_results,   labels = TRUE,   position_labels_x = 0.15,   position_labels_y = 0.075,   position_lr_x = 0.05,   font_size = 25,   line_size = 1.5,   highlight_color = \"#CD2626\" )"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/plot_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Sequential ANOVA Results — plot_anova","text":"anova_results result object seq_anova() function (argument must class seq_anova_results). labels show labels plot. position_labels_x position boundary labels x-axis. position_labels_y position boundary labels y-axis. position_lr_x scales position LR label x-axis. font_size font size plot. line_size line size plot. highlight_color highlighting color, default \"#CD2626\" (red).","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/plot_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Sequential ANOVA Results — plot_anova","text":"returns plot","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/plot_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Sequential ANOVA Results — plot_anova","text":"","code":"# simulate data for the example ------------------------------------------------ set.seed(333) data <- sprtt::draw_sample_normal(3, f = 0.25, max_n = 30)  # calculate the SPRT ----------------------------------------------------------- anova_results <- sprtt::seq_anova(y~x, f = 0.25, data = data, plot = TRUE)  # plot the results ------------------------------------------------------------- sprtt::plot_anova(anova_results)   sprtt::plot_anova(anova_results,                  labels = TRUE,                  position_labels_x = 0.5,                  position_labels_y = 0.1,                  position_lr_x = -0.5,                  font_size = 25,                  line_size = 2,                  highlight_color = \"green\"                  )   sprtt::plot_anova(anova_results,                  labels = FALSE                  )"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Analysis of Variance — seq_anova","title":"Sequential Analysis of Variance — seq_anova","text":"Performs sequential one-way fixed effects ANOVA, see Steinhilber et al. (2023) doi:10.31234/osf.io/m64ne information.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Analysis of Variance — seq_anova","text":"","code":"seq_anova(   formula,   f,   alpha = 0.05,   power = 0.95,   data,   verbose = TRUE,   plot = FALSE,   seq_steps = \"single\" )"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential Analysis of Variance — seq_anova","text":"formula formula specifying model. f Cohen's f (expected minimal effect size effect size interest). alpha type error. number 0 1. power 1 - beta (beta type II error probability). number 0 1. data data frame variables specified formula found. verbose logical value whether want verbose output . plot calculates ANOVA sequentially data saves results slot called plot. calculation necessary plot_anova() function. seq_steps Defines sequential steps sequential calculation plot = TRUE. Argument takes either vector numbers argument single balanced. vector numbers specifies sample sizes anova calculated. single specifies single point test statistic calculated (step size = 1). Attention: calculation starts number groups times two. data fit , specify sequential steps argument. balanced specifies step size equal number groups. Attention: calculation starts number groups times two.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential Analysis of Variance — seq_anova","text":"object S4 class seq_anova_results. Click class link see full description slots. get access object use @-operator []-brackets instead $. See examples .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Analysis of Variance — seq_anova","text":"","code":"# simulate data ---------------------------------------------------------------- set.seed(333) data <- sprtt::draw_sample_normal(k_groups = 3,                     f = 0.25,                     sd = c(1, 1, 1),                     max_n = 50)   # calculate sequential ANOVA --------------------------------------------------- results <- sprtt::seq_anova(y ~ x, f = 0.25, data = data) # test decision results@decision #> [1] \"accept H1\" # test results results #>  #> *****  Sequential ANOVA ***** #>  #> formula: y ~ x #> test statistic: #>  log-likelihood ratio = 7.174, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -3.752 #>  null hypothesis = -10.926 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's f = 0.25 #> empirical Cohen's f = 0.3974361, 95% CI[0.2149383, 0.5519742] #> Cohen's f adjusted = 0.373 #> degrees of freedom: df1 = 2, df2 = 147 #> SS effect = 20.80949, SS residual = 131.7428, SS total = 152.5523 #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # calculate sequential ANOVA --------------------------------------------------- results <- sprtt::seq_anova(y ~ x,                             f = 0.25,                             data = data,                             alpha = 0.01,                             power = .80,                             verbose = TRUE) results #>  #> *****  Sequential ANOVA ***** #>  #> formula: y ~ x #> test statistic: #>  log-likelihood ratio = 7.174, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -1.599, upper log(A) = 4.382 #> Log-Likelihood of the: #>  alternative hypothesis = -3.752 #>  null hypothesis = -10.926 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's f = 0.25 #> empirical Cohen's f = 0.3974361, 95% CI[0.2149383, 0.5519742] #> Cohen's f adjusted = 0.373 #> degrees of freedom: df1 = 2, df2 = 147 #> SS effect = 20.80949, SS residual = 131.7428, SS total = 152.5523 #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # calculate sequential ANOVA --------------------------------------------------- results <- sprtt::seq_anova(y ~ x,                             f = 0.15,                             data = data,                             alpha = 0.05,                             power = .80,                             verbose = FALSE) results #>  #> *****  Sequential ANOVA ***** #>  #> formula: y ~ x #> test statistic: #>  log-likelihood ratio = 4.725, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -1.558, upper log(A) = 2.773"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova_results-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent the results of a sequential anova. — seq_anova_results-class","title":"An S4 class to represent the results of a sequential anova. — seq_anova_results-class","text":"S4 class represent results sequential anova.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova_results-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to represent the results of a sequential anova. — seq_anova_results-class","text":"plot list arguments plot_anova() function","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_anova_results-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent the results of a sequential anova. — seq_anova_results-class","text":"likelihood_ratio_log logarithmic test statistic. decision test decision: \"accept H1\", \"accept H0\", \"continue sampling\". A_boundary_log lower logarithmic boundary test. B_boundary_log upper logarithmic boundary test. f number indicating specified effect size (Cohen's f). effect_sizes list effect sizes (Cohen's f, eta squared, ...). alpha type error. number 0 1. power 1 - beta (beta type II error probability). number 0 1. likelihood_ratio likelihood ratio test without logarithm. likelihood_1 likelihood alternative Hypothesis (H1). likelihood_0 likelihood null Hypothesis (H0). likelihood_1_log logarithmic likelihood alternative Hypothesis (H1). likelihood_0_log logarithmic likelihood null Hypothesis (H0). non_centrality_parameter parameter calculate likelihoods F_value F-value F-statistic. df_1 degrees freedom. df_2 degrees freedom. ss_effect ss_effect. ss_residual ss_residual. ss_total ss_total. total_sample_size total sample size. data_name character string giving name(s) data. verbose logical value whether want verbose output .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Probability Ratio Test using t-statistic — seq_ttest","title":"Sequential Probability Ratio Test using t-statistic — seq_ttest","text":"Performs one two sample sequential t-tests vectors data. information sequential t-test, see Schnuerch & Erdfelder (2019) doi:10.1037/met0000234.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Probability Ratio Test using t-statistic — seq_ttest","text":"","code":"seq_ttest(   x,   y = NULL,   data = NULL,   mu = 0,   d,   alpha = 0.05,   power = 0.95,   alternative = \"two.sided\",   paired = FALSE,   na.rm = TRUE,   verbose = TRUE )"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential Probability Ratio Test using t-statistic — seq_ttest","text":"x Works two classes: numeric formula. Therefore can write \"x\" \"x~y\". \"numeric input\": (non-empty) numeric vector data values. \"formula input\": formula form lhs ~ rhs lhs numeric variable giving data values rhs either 1 one-sample test factor two levels giving corresponding groups. y optional (non-empty) numeric vector data values. data optional data.frame, can use combination \"formula input\" argument x. mu number indicating true value mean (difference means performing two sample test). d number indicating specified effect size (Cohen's d) alpha type error. number 0 1. power 1 - beta (beta type II error probability). number 0 1. alternative character string specifying alternative hypothesis, must one two.sided (default), greater less. can specify just initial letter. paired logical indicating whether want paired t-test. na.rm logical value indicating whether NA values stripped computation proceeds. verbose logical value whether want verbose output .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential Probability Ratio Test using t-statistic — seq_ttest","text":"object S4 class seq_ttest_results. Click class link see full description slots. get access object use @-operator []-brackets instead $. See examples .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Probability Ratio Test using t-statistic — seq_ttest","text":"","code":"# set seed -------------------------------------------------------------------- set.seed(333)  # load library ---------------------------------------------------------------- library(sprtt)  # one sample: numeric input --------------------------------------------------- treatment_group <- rnorm(20, mean = 0, sd = 1) results <- seq_ttest(treatment_group, mu = 1, d = 0.8)  # get access to the slots ----------------------------------------------------- # @ Operator results@likelihood_ratio #> [1] 965.0728  # [] Operator results[\"likelihood_ratio\"] #> [1] 965.0728  # two sample: numeric input---------------------------------------------------- treatment_group <- stats::rnorm(20, mean = 0, sd = 1) control_group <- stats::rnorm(20, mean = 1, sd = 1) seq_ttest(treatment_group, control_group, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: treatment_group and  control_group #> test statistic: #>  log-likelihood ratio = 5.347, decision = accept H1 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -4.211 #>  null hypothesis = -9.558 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 38 #> sample estimates: #> mean of x mean of y  #>  -0.05204   1.18768  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # two sample: formula input --------------------------------------------------- stress_level <- stats::rnorm(20, mean = 0, sd = 1) sex <- as.factor(c(rep(1, 10), rep(2, 10))) seq_ttest(stress_level ~ sex, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: stress_level ~ sex #> test statistic: #>  log-likelihood ratio = -1.455, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -1.233 #>  null hypothesis = 0.222 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 18 #> sample estimates: #> mean of x mean of y  #>  -0.23286  -0.08217  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # NA in the data -------------------------------------------------------------- stress_level <- c(NA, stats::rnorm(20, mean = 0, sd = 2), NA) sex <- as.factor(c(rep(1, 11), rep(2, 11))) seq_ttest(stress_level ~ sex, d = 0.8, na.rm = TRUE) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: stress_level ~ sex #> test statistic: #>  log-likelihood ratio = -0.359, decision = continue sampling #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -1.923 #>  null hypothesis = -1.564 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 18 #> sample estimates: #> mean of x mean of y  #>  -0.40818   0.42068  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator.  # work with dataset (data are in the package included) ------------------------ seq_ttest(monthly_income ~ sex, data = df_income, d = 0.8) #>  #> *****  Sequential  Two Sample t-test ***** #>  #> formula: monthly_income ~ sex #> test statistic: #>  log-likelihood ratio = -9.514, decision = accept H0 #> SPRT thresholds: #>  lower log(B) = -2.944, upper log(A) = 2.944 #> Log-Likelihood of the: #>  alternative hypothesis = -8.093 #>  null hypothesis = 1.421 #> alternative hypothesis: true difference in means is not equal to 0. #> specified effect size: Cohen's d = 0.8 #> degrees of freedom: df = 118 #> sample estimates: #> mean of x mean of y  #>  3072.086  3080.715  #> *Note: to get access to the object of the results use the @ or [] instead of the $ operator."},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest_results-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent the results of a sequential t-test. — seq_ttest_results-class","title":"An S4 class to represent the results of a sequential t-test. — seq_ttest_results-class","text":"S4 class represent results sequential t-test.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/seq_ttest_results-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent the results of a sequential t-test. — seq_ttest_results-class","text":"likelihood_ratio_log logarithmic test statistic. decision test decision: \"accept H1\", \"accept H0\", \"continue sampling\". A_boundary_log lower logarithmic boundary test. B_boundary_log upper logarithmic boundary test. d number indicating specified effect size (Cohen's d). mu number indicating true value mean (difference means performing two sample test). alpha type error. number 0 1. power 1 - beta (beta type II error probability). number 0 1. likelihood_ratio likelihood ratio test without logarithm. likelihood_1 likelihood alternative Hypothesis (H1). likelihood_0 likelihood null Hypothesis (H0). likelihood_1_log logarithmic likelihood alternative Hypothesis (H1). likelihood_0_log logarithmic likelihood null Hypothesis (H0). non_centrality_parameter parameter calculate likelihoods t_value t-value t-statistic. p_value p-value t-test. df degrees freedom. mean_estimate estimated mean difference means depending whether one-sample test two-sample test. alternative character string specifying alternative hypothesis: \"two.sided\" (default), \"greater\" \"less\". one_sample \"true\" one-sample test, \"false\" two-sample test. ttest_method character string indicating type t-test performed. data_name character string giving name(s) data. verbose logical value whether want verbose output .","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sprtt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sprtt: Sequential Probability Ratio Tests Toolbox — sprtt-package","title":"sprtt: Sequential Probability Ratio Tests Toolbox — sprtt-package","text":"toolbox Sequential Probability Ratio Tests (SPRT), Wald (1945) doi:10.2134/agronj1947.00021962003900070011x . SPRTs applied data sampling process, ideally observation. stage, test return decision either continue sampling terminate accept one specified hypotheses. seq_ttest() function performs sequential t tests developed Rushton (1950) doi:10.2307/2332385 , Rushton (1952) doi:10.2307/2334026  Hajnal (1961) doi:10.2307/2333131 , based SPRT. Specifically, seq_ttest() performs one-sample, two-sample, paired t tests testing one- two-sided hypotheses. information SPRT t test, see Schnuerch & Erdfelder (2019) doi:10.1037/met0000234 . seq_anova() function allows perform sequential one-way fixed effects ANOVA (see Steinhilber et al. (2023) <> ).","code":""},{"path":[]},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sprtt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sprtt: Sequential Probability Ratio Tests Toolbox — sprtt-package","text":"Maintainer: Meike Steinhilber Meike.Steinhilber@aol.com (ORCID) Authors: Martin Schnuerch (ORCID) [thesis advisor] Anna-Lena Schubert (ORCID) [thesis advisor]","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_arguments-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to retrieve the contents of a slot of an object of the\nseq_anova_arguments class. — [,seq_anova_arguments-method","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_arguments class. — [,seq_anova_arguments-method","text":"method used internally process input arguments seq_anova function. normal user, can ignore specific documentation.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_arguments-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_arguments class. — [,seq_anova_arguments-method","text":"","code":"# S4 method for seq_anova_arguments [(x, i, j, drop)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_arguments-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_arguments class. — [,seq_anova_arguments-method","text":"x seq_anova_arguments object. indices indicating elements extract. j used. drop used. seq_anova_arguments corresponding class method.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_arguments-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_arguments class. — [,seq_anova_arguments-method","text":"Returns contents specified slot. information, see documentation seq_anova_arguments class.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_results-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to retrieve the contents of a slot of an object of the\nseq_anova_results class. — [,seq_anova_results-method","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_results class. — [,seq_anova_results-method","text":"Method retrieve contents slot object seq_anova_results class.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_results-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_results class. — [,seq_anova_results-method","text":"","code":"# S4 method for seq_anova_results [(x, i, j, drop)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_results-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_results class. — [,seq_anova_results-method","text":"x seq_ttest_results object. indices indicating elements extract. j used. drop used. seq_anova_results corresponding class method.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_anova_results-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to retrieve the contents of a slot of an object of the\nseq_anova_results class. — [,seq_anova_results-method","text":"Returns contents specified slot. information, see documentation seq_anova_results class.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_arguments-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_arguments class. — [,seq_ttest_arguments-method","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_arguments class. — [,seq_ttest_arguments-method","text":"method used internally process input arguments seq_ttest function. normal user, can ignore specific documentation.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_arguments-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_arguments class. — [,seq_ttest_arguments-method","text":"","code":"# S4 method for seq_ttest_arguments [(x, i, j, drop)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_arguments-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_arguments class. — [,seq_ttest_arguments-method","text":"x seq_ttest_arguments object. indices indicating elements extract. j used. drop used. seq_ttest_arguments corresponding class method.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_arguments-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_arguments class. — [,seq_ttest_arguments-method","text":"Returns contents specified slot seq_ttest_arguments object. information, see arguments seq_ttest function.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_results-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_results class. — [,seq_ttest_results-method","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_results class. — [,seq_ttest_results-method","text":"Method retrieve contents slot object seq_ttest_results class.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_results-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_results class. — [,seq_ttest_results-method","text":"","code":"# S4 method for seq_ttest_results [(x, i, j, drop)"},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_results-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_results class. — [,seq_ttest_results-method","text":"x seq_ttest_results object. indices indicating elements extract. j used. drop used. seq_ttest_results corresponding class method.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/reference/sub-seq_ttest_results-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to retrieve the contents of a slot of an object of the\nseq_ttest_results class. — [,seq_ttest_results-method","text":"Returns contents specified slot. information, see documentation seq_ttest_results class.","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/news/index.html","id":"sprtt-020","dir":"Changelog","previous_headings":"","what":"sprtt 0.2.0","title":"sprtt 0.2.0","text":"Add: seq_anova() function, performs sequential one-way fixed effects ANOVA Add: draw_sample_normal() function, simulates data sequential ANOVA using normal distributions. Add: draw_sample_mixture() function, simulates data sequential ANOVA using Gaussian Mixture distributions Add: plot_anova() plot function results seq_anova() function. Bug fix: update text show(), mu equal 0 Change: sprtt logo","code":""},{"path":"https://meikesteinhilber.github.io/sprtt/news/index.html","id":"sprtt-010","dir":"Changelog","previous_headings":"","what":"sprtt 0.1.0","title":"sprtt 0.1.0","text":"CRAN release: 2021-08-06 Added seq_ttest() function, performs sequential t-tests Added test datasets df_income, df_cancer df_stress Added vignette “use sprtt package” Added vignette “Sequential t-test” Added vignette “Use Case” Added tests simulate error rates test Added unit tests Added pkgdown site Added logo","code":""}]
